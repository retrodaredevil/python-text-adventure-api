# file 1

public class Person(object){

	public String name  # get by doing Person#getName() in a language like java but still just .name in a language like python
	unsafe public String name  # get by doing Person#name in a lanuage like java and still .name in a language like python (changes how it's compiled and is not recommended)
	public int age {public default, public default} = 0
	private List<String> nickNames {get nickNames, private default}  # by default, the stuff inside the {} is there by default
	# since nickNames get is not default, whenever you reference nickNames, it will call it's getter or setter. (In java it would create it's setter)
	
	public constructor(String name, int age, List<String> nickNames){
		this.name = name
		this.nickNames = nickNames  # calls the setter 
	}
	
	public get nickNames {  # treated like a method just like java does. If it's compiled to another language, it will be treated differently
		return this.nickNames  # when referencing the nickNames inside here, it won't call the getter or setter. (Different scope in here)
	}
	
	
}

# file 2

void main(List<String> args){  # by default public
	out.println("Printing to out")
	if(true){
		err.println("Welp, true just happens to be true")
	} elif (true or false){
		out.println("lol")
	}
	ReadonlyList test = args

}

# file 3

class Enemy{
	
	
	
	public boolean canJumpNow() -> canAlwaysJump  # make this syntax better lol
	
	implementation canJumpNow -> canAlwaysJump(){
		return true
	}
	implementation canJumpNow() -> canNeverJump(){
		return false
	}()  # if you put the () ^ you have to call canNeverJump because you're basically calling canNeverJump() instead
	        # of saying this is the implementation. (You should use the other version)
	# same as above V
	implementation canJumpNow() { canNeverJump(){return false}() }
	
	
}
